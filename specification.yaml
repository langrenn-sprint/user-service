openapi: 3.0.3
info:
  version: 1.0.0
  title: User service
  description: The user service let you administrate the users
  license:
      name: Apache 2.0
      url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /login:
    post:
      description: Login and get token in return
      requestBody:
        description: Username and password
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: A valid jwt token
  /authorize:
    post:
      description: Validate token and authorize against given roles
      requestBody:
        description: jwt token to be validated against roles
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                roles:
                  description: An array of target roles
                  type: array
                  items:
                    type: string
      responses:
        204:
          description: token is valid relativ to the given role.
  /users:
    post:
      description: Add a new user
      requestBody:
        description: The new user to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Created
    get:
      description: Get a list of users
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollection'
  /users/{id}:
    get:
      description: Get a unique user
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      description: Modify a given user
      requestBody:
        description: The new version of the user resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        204:
          description: Created
    delete:
      description: Delete a unique user
      responses:
        204:
          description: No content
    parameters:
    - name: id
      in: path
      description: ID of user
      required: true
      schema:
        type: string
      style: simple

components:
  schemas:
    UserCollection:
      type: object
      properties:
        shapes:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        role:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []
